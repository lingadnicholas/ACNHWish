[{"E:\\projects\\acnh_wishlist\\src\\index.js":"1","E:\\projects\\acnh_wishlist\\src\\reportWebVitals.js":"2","E:\\projects\\acnh_wishlist\\src\\App.js":"3","E:\\projects\\acnh_wishlist\\src\\components\\acnhTable.js":"4","E:\\projects\\acnh_wishlist\\src\\components\\dropdown.js":"5"},{"size":501,"mtime":1608595453156,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":1180,"mtime":1608679753463,"results":"9","hashOfConfig":"7"},{"size":3857,"mtime":1608679808464,"results":"10","hashOfConfig":"7"},{"size":1265,"mtime":1608679696872,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1qne9ei",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"E:\\projects\\acnh_wishlist\\src\\index.js",[],["25","26"],"E:\\projects\\acnh_wishlist\\src\\reportWebVitals.js",[],"E:\\projects\\acnh_wishlist\\src\\App.js",[],"E:\\projects\\acnh_wishlist\\src\\components\\acnhTable.js",["27","28"],"import './acnhTable.css';\r\nimport React, { useState } from 'react'; \r\nimport { render } from '@testing-library/react';\r\n\r\n/*When there is a valid value from the dropdown list, we want to:\r\nfetch the JSON object with that ID from the ACNH API\r\nGet all the data (Personality, Name, Picture, Birthday, Species, Gender, Catchphrase)\r\nCreate a new Villager, place it in the respective VillagerColumn*/\r\nexport async function GetVillager(value) {\r\n    const url = 'https://acnhapi.com/v1/villagers/'\r\n    const response = await fetch(url + value);\r\n    const data = await response.json();\r\n    const villagerInfo = {\r\n      key: value,\r\n      name: data.name['name-USen'],\r\n      personality: data.personality,\r\n      image_url: data.image_uri,\r\n      birthday: data['birthday-string'],\r\n      species: data.species,\r\n      gender: data.gender,\r\n      catch_phrase: data['catch-phrase']\r\n    }\r\n\r\n    //Don't add duplicates\r\n    if (!ids.includes(villagerInfo.key))\r\n    {\r\n        villagers.push(villagerInfo)\r\n        ids.push(villagerInfo.key)\r\n    }\r\n  }\r\n\r\nfunction Villager(prop)\r\n{\r\n    //Key = Villager ID \r\n    return(\r\n        <div className='villager'>\r\n            <div>\r\n                <strong>{prop.name}</strong>\r\n            </div>\r\n            <div>            \r\n                <img className='icon' alt={prop.name + 'icon'} src ={prop.image_url}></img>\r\n            </div>\r\n            <div>\r\n                <em>Birthday: </em>{prop.birthday}\r\n            </div>\r\n            <div>\r\n                <em>Species: </em>{prop.species}\r\n            </div>\r\n            <div>\r\n                <em>Gender: </em>{prop.gender}\r\n            </div>\r\n            <div>\r\n                <em>Catchphrase: </em>{'\"' + prop.catch_phrase + '\"'}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nvar villagers = []; \r\nvar ids = []; \r\n\r\nexport default class GetVillagerNames extends React.Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.key = this.props.personality; \r\n\r\n    }\r\n    state = { \r\n        loading: true,\r\n        list: []\r\n    }\r\n    intervalID;\r\n    added = []; \r\n\r\n    /*Called by checkVillagers, adds villagers to our state, and forces a rerender*/\r\n    addToList = (villagerInfo) => {\r\n        this.added.push(villagerInfo.key)\r\n        this.setState( {list: [...this.state.list, <Villager\r\n                        key={villagerInfo.key}\r\n                        name={villagerInfo.name}\r\n                        image_url={villagerInfo.image_url}\r\n                        birthday={villagerInfo.birthday}\r\n                        species={villagerInfo.species}\r\n                        gender={villagerInfo.gender}\r\n                        catch_phrase={villagerInfo.catch_phrase}\r\n                        />] } )\r\n        \r\n    }\r\n\r\n    /*Checks the villagers array to see if there are any new additions\r\n    of villagers with this specific personality type!*/\r\n    checkVillagers = () => {\r\n        if (villagers.length === 0)\r\n            return; \r\n        for (var i = 0; i < villagers.length; i++)\r\n        {\r\n            if (this.props.personality === villagers[i].personality \r\n                && !this.added.includes(villagers[i].key))\r\n                {\r\n                    this.addToList(villagers[i])\r\n                }\r\n        }\r\n    }\r\n\r\n    \r\n    /*Check every second to add villager to wishlist!*/\r\n    componentDidMount() {\r\n        this.checkVillagers()\r\n        this.intervalID = setInterval(this.checkVillagers.bind(this), 500)\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n\r\n    render()\r\n    {\r\n    return(\r\n    <div className='column'> \r\n        <div className='type'>\r\n            <strong>{this.props.personality}</strong>\r\n        </div>\r\n        <div className='list'>\r\n            {this.state.list}\r\n        </div>\r\n    </div>\r\n    )\r\n    }\r\n}\r\n\r\n","E:\\projects\\acnh_wishlist\\src\\components\\dropdown.js",[],["29","30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":2,"column":17,"nodeType":"37","messageId":"38","endLine":2,"endColumn":25},{"ruleId":"35","severity":1,"message":"39","line":3,"column":10,"nodeType":"37","messageId":"38","endLine":3,"endColumn":16},{"ruleId":"31","replacedBy":"40"},{"ruleId":"33","replacedBy":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'render' is defined but never used.",["42"],["43"],"no-global-assign","no-unsafe-negation"]